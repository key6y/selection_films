import psycopg2
from main import ExpertSystem
import sys
import os

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ UTF-8 –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Ä—É—Å—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
if sys.stdout.encoding != 'utf-8':
    sys.stdout.reconfigure(encoding='utf-8')
    sys.stderr.reconfigure(encoding='utf-8')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
db_config = {
    "host": "localhost",  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ localhost –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    "database": "movie_recommendation_system",
    "user": "postgres",
    "password": "luntik2406",
    "port": "5432",
    "options": "-c client_encoding=UTF8"  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
}

def get_db_connection():
    return psycopg2.connect(**db_config)

def main():
    try:
        with get_db_connection() as conn:
            expert_system = ExpertSystem(conn)
            while True:
                print("\nüé¨ === –≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–±–æ—Ä–∞ —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤ === üé¨")
                print("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
                print("1. üé• –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
                print("2. üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã")
                print("3. üö™ –í—ã—Ö–æ–¥")
                choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")

                if choice == "1":
                    print("\n=== –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ ===")
                    content_type = input("–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–§–∏–ª—å–º/–°–µ—Ä–∏–∞–ª/–í—Å–µ): ").lower()
                    while content_type not in ["—Ñ–∏–ª—å–º", "—Å–µ—Ä–∏–∞–ª", "–≤—Å–µ"]:
                        content_type = input("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: –§–∏–ª—å–º, –°–µ—Ä–∏–∞–ª, –í—Å–µ: ").lower()

                    genre = input("–ñ–∞–Ω—Ä (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ª—é–±–æ–≥–æ, –ø—Ä–∏–º–µ—Ä—ã: –î—Ä–∞–º–∞, –ö–æ–º–µ–¥–∏—è, –§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞, –¢—Ä–∏–ª–ª–µ—Ä, –ë–æ–µ–≤–∏–∫): ")
                    while genre and genre not in ["–¥—Ä–∞–º–∞", "–∫–æ–º–µ–¥–∏—è", "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "—Ç—Ä–∏–ª–ª–µ—Ä", "–±–æ–µ–≤–∏–∫"]:
                        genre = input("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: –î—Ä–∞–º–∞, –ö–æ–º–µ–¥–∏—è, –§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞, –¢—Ä–∏–ª–ª–µ—Ä, –ë–æ–µ–≤–∏–∫: ").lower()

                    min_rating = float(input("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ (0-10): ") or 0)
                    while min_rating < 0 or min_rating > 10:
                        min_rating = float(input("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç 0 –¥–æ 10: ") or 0)

                    year_from = int(input("–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞ –æ—Ç: ") or 1900)
                    year_to = int(input("–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞ –¥–æ: ") or 2025)
                    while year_from > year_to:
                        print("–ì–æ–¥ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –≥–æ–¥–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è!")
                        year_from = int(input("–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞ –æ—Ç: ") or 1900)
                        year_to = int(input("–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞ –¥–æ: ") or 2025)

                    country = input("–°—Ç—Ä–∞–Ω–∞ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ª—é–±–æ–π): ")
                    language = input("–Ø–∑—ã–∫ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ª—é–±–æ–≥–æ): ")
                    age_rating = input("–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ª—é–±–æ–≥–æ): ")
                    director = input("–†–µ–∂–∏—Å—Å–µ—Ä (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ª—é–±–æ–≥–æ): ")
                    actor = input("–ê–∫—Ç—ë—Ä (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ª—é–±–æ–≥–æ): ")

                    min_seasons = None
                    max_seasons = None
                    if content_type in ["—Å–µ—Ä–∏–∞–ª", "–≤—Å–µ"]:
                        min_seasons = int(input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∑–æ–Ω–æ–≤ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ª—é–±–æ–≥–æ): ") or 0)
                        max_seasons = int(input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∑–æ–Ω–æ–≤ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ª—é–±–æ–≥–æ): ") or 999)

                    limit = int(input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10): ") or 10)
                    while limit <= 0:
                        limit = int(input("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ: ") or 10)

                    print("\n–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ:")
                    print("1. –ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É")
                    print("2. –ü–æ –≥–æ–¥—É –≤—ã–ø—É—Å–∫–∞")
                    print("3. –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–µ–∑–æ–Ω–æ–≤")
                    sort_by = input("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç (1-3): ")
                    while sort_by not in ["1", "2", "3"]:
                        sort_by = input("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç (1-3): ")
                    sort_by = {"1": "rating", "2": "year", "3": "seasons"}[sort_by]

                    recommendations = expert_system.get_recommendations(
                        content_type={"—Ñ–∏–ª—å–º": "movie", "—Å–µ—Ä–∏–∞–ª": "series", "–≤—Å–µ": "all"}[content_type],
                        genre=genre,
                        min_rating=min_rating,
                        year_from=year_from,
                        year_to=year_to,
                        country=country,
                        language=language,
                        age_rating=age_rating,
                        director=director,
                        actor=actor,
                        min_seasons=min_seasons,
                        max_seasons=max_seasons,
                        sort_by=sort_by,
                        limit=limit
                    )
                    print("\n=== –ü–æ–∏—Å–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π ===")
                    if recommendations:
                        print("=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ ===")
                        for i, (title, year, rating, seasons, duration) in enumerate(recommendations, 1):
                            content_type_display = "–§–∏–ª—å–º" if duration else "–°–µ—Ä–∏–∞–ª"
                            print(f"{i}. {title} ({year}), –†–µ–π—Ç–∏–Ω–≥: {rating}, {duration or f'{seasons} —Å–µ–∑–æ–Ω–æ–≤'}")
                            genres = expert_system.get_genres(title, duration is not None)
                            if genres:
                                print(f"   –ñ–∞–Ω—Ä—ã: {', '.join(genres)}")
                            director = expert_system.get_director(title, duration is not None)
                            if director:
                                print(f"   –†–µ–∂–∏—Å—Å–µ—Ä: {director}")
                            print(f"   –°—Ç—Ä–∞–Ω–∞: {expert_system.get_country(title, duration is not None)}, –Ø–∑—ã–∫: {expert_system.get_language(title, duration is not None)}, –í–æ–∑—Ä–∞—Å—Ç: {expert_system.get_age_rating(title, duration is not None)}")
                    else:
                        print("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. üòû")
                elif choice == "2":
                    expert_system.view_available_options()
                elif choice == "3":
                    print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                else:
                    print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()